{"ast":null,"code":"import _objectSpread from \"/Users/mkelly/react_coderAcademy/class-minimal-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/mkelly/react_coderAcademy/class-minimal-app/src/index.js\";\nimport React from \"react\";\nimport { render } from \"react-dom\"; // This creates a redux\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux'; // Other files \n\nimport Counter from './counter.js'; // Import CSS\n\nimport \"./index.css\";\nimport SomeContainer from \"./someContainer.js\"; // This defines an initial state incase redux is undefined\n\nconst initialState = {\n  label: \"Something\",\n  count: 0\n};\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.store = createStore(this.reducer);\n  }\n\n  // The state = initialState basically defines it as 0 instead of undefined \n  reducer(state = initialState, action) {\n    // The newState should never be modified within the reducer \n    let newState = {}; // Switch is just like case in Ruby.\n\n    switch (action.type) {\n      case \"UPDATE_COUNT\":\n        newState = _objectSpread({}, state, {\n          count: action.newCount\n        });\n        break;\n\n      default:\n        newState = _objectSpread({}, state);\n    }\n\n    return newState;\n  }\n\n  render() {\n    return React.createElement(Provider, {\n      store: this.store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"arbitrary-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Counter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"another-arbitrary-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(SomeContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nrender(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 58\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/mkelly/react_coderAcademy/class-minimal-app/src/index.js"],"names":["React","render","createStore","Provider","Counter","SomeContainer","initialState","label","count","App","Component","store","reducer","state","action","newState","type","newCount","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,WAAvB,C,CACA;;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,cAApB,C,CAEA;;AACA,OAAO,aAAP;AACA,OAAOC,aAAP,MAA0B,oBAA1B,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAE,WAAT;AAAsBC,EAAAA,KAAK,EAAE;AAA7B,CAArB;;AAEA,MAAMC,GAAN,SAAkBT,KAAK,CAACU,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAsBhCC,KAtBgC,GAsBxBT,WAAW,CAAE,KAAKU,OAAP,CAtBa;AAAA;;AAEhC;AACAA,EAAAA,OAAO,CAAEC,KAAK,GAAGP,YAAV,EAAwBQ,MAAxB,EAAiC;AAEtC;AACA,QAAIC,QAAQ,GAAG,EAAf,CAHsC,CAKtC;;AACA,YAAQD,MAAM,CAACE,IAAf;AACE,WAAK,cAAL;AACED,QAAAA,QAAQ,qBAAQF,KAAR;AAAeL,UAAAA,KAAK,EAAEM,MAAM,CAACG;AAA7B,UAAR;AACA;;AAEF;AACEF,QAAAA,QAAQ,qBAAQF,KAAR,CAAR;AANJ;;AASA,WAAOE,QAAP;AACD;;AAKDd,EAAAA,MAAM,GAAI;AACR,WACE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAE,KAAKU,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAE,OAAF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,EAKE;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CALF,CADF,CADF;AAaD;;AAtC+B;;AAyClCV,MAAM,CAAC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAD,EAAUiB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAV,CAAN","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\n// This creates a redux\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\n// Other files \nimport Counter from './counter.js';\n\n// Import CSS\nimport \"./index.css\";\nimport SomeContainer from \"./someContainer.js\";\n\n// This defines an initial state incase redux is undefined\nconst initialState = { label: \"Something\", count: 0 };\n\nclass App extends React.Component {\n\n  // The state = initialState basically defines it as 0 instead of undefined \n  reducer( state = initialState, action ) {\n\n    // The newState should never be modified within the reducer \n    let newState = {};\n\n    // Switch is just like case in Ruby.\n    switch( action.type ) {\n      case \"UPDATE_COUNT\":\n        newState = { ...state, count: action.newCount };\n        break;\n\n      default:\n        newState = { ...state };\n    }\n    \n    return newState\n  };\n\n  // Store is where we hold the data and actions redux \n  store = createStore( this.reducer );\n\n  render () {\n    return (\n      <Provider store={this.store}>\n        <div>\n          <div className=\"arbitrary-block\">\n            {/* The below renders the counter file */}\n            < Counter />\n          </div>\n          <div className=\"another-arbitrary-block\">\n            <SomeContainer />\n          </div>\n        </div>\n      </Provider>\n    )\n  }\n}\n\nrender(<App />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}